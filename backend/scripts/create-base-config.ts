#!/usr/bin/env ts-node

import fs from 'fs';
import bcrypt from 'bcryptjs';
import crypto from 'crypto';
import { TenantConfig } from '../src/types';

const ENCRYPTION_KEY = process.env.CONFIG_ENCRYPTION_KEY;

if (!ENCRYPTION_KEY) {
  console.error('‚ùå CONFIG_ENCRYPTION_KEY n√£o configurada!');
  process.exit(1);
}

/**
 * Criptografa configura√ß√£o
 */
const encryptConfig = (config: TenantConfig): string => {
  const cipher = crypto.createCipher('aes-256-cbc', ENCRYPTION_KEY);
  let encrypted = cipher.update(JSON.stringify(config, null, 2), 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
};

/**
 * Cria arquivo base para venda
 */
const createBaseConfig = async (): Promise<void> => {
  console.log('üèóÔ∏è  Criando arquivo base para venda...');
  
  try {
    // Configura√ß√£o base (template)
    const baseConfig: TenantConfig = {
      id: 'base',
      name: 'Nova Federa√ß√£o',
      domain: 'exemplo.com.br',
      firebase: {
        apiKey: 'SUA_FIREBASE_API_KEY_AQUI',
        authDomain: 'seu-projeto.firebaseapp.com',
        projectId: 'seu-projeto-id',
        storageBucket: 'seu-projeto.appspot.com',
        messagingSenderId: '123456789',
        appId: '1:123456789:web:abcdef123456',
        measurementId: 'G-XXXXXXXXXX'
      },
      admin: {
        login: 'admin',
        passwordHash: await bcrypt.hash('senha123', 12), // Senha padr√£o
        name: 'Administrador',
        salt: await bcrypt.genSalt(12),
        createdAt: new Date().toISOString()
      },
      branding: {
        name: 'Nova Federa√ß√£o',
        logo: '/logo.png',
        colors: {
          primary: '#007bff',
          secondary: '#6c757d'
        }
      }
    };
    
    // Criar diret√≥rio configs se n√£o existir
    if (!fs.existsSync('configs')) {
      fs.mkdirSync('configs', { recursive: true });
    }
    
    // Criptografar e salvar configura√ß√£o base
    const encryptedConfig = encryptConfig(baseConfig);
    const configPath = 'configs/base.enc';
    
    fs.writeFileSync(configPath, encryptedConfig);
    
    console.log('‚úÖ Arquivo base criado com sucesso!');
    console.log(`üìÅ Localiza√ß√£o: ${configPath}`);
    console.log('');
    console.log('üìã Configura√ß√£o base inclui:');
    console.log('   - ID: base');
    console.log('   - Nome: Nova Federa√ß√£o');
    console.log('   - Admin: admin / senha123');
    console.log('   - Firebase: Configura√ß√µes de exemplo');
    console.log('   - Branding: Configura√ß√µes padr√£o');
    console.log('');
    console.log('üîß Para usar este arquivo base:');
    console.log('   1. Copie base.enc para <tenant-id>.enc');
    console.log('   2. Use o script setup-tenant para personalizar');
    console.log('   3. Configure as vari√°veis de ambiente do Firebase');
    console.log('');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar arquivo base:', error);
    process.exit(1);
  }
};

/**
 * Cria documenta√ß√£o para comercializa√ß√£o
 */
const createDocumentation = (): void => {
  const documentation = `# Sistema de Federa√ß√µes - Arquivo Base

## üìã Sobre o Arquivo Base

O arquivo \`base.enc\` √© um template para configura√ß√£o de novos clientes (federa√ß√µes). Ele cont√©m configura√ß√µes padr√£o que devem ser personalizadas para cada cliente.

## üîß Como Usar

### 1. Configura√ß√£o de Novo Cliente

\`\`\`bash
# Copiar arquivo base
cp configs/base.enc configs/novo-cliente.enc

# Configurar novo cliente
npm run setup-tenant novo-cliente "Nome da Federa√ß√£o" "senhaAdmin123"
\`\`\`

### 2. Configura√ß√£o Manual

Se preferir configurar manualmente:

1. **Copie o arquivo base:**
   \`\`\`bash
   cp configs/base.enc configs/meu-cliente.enc
   \`\`\`

2. **Configure as vari√°veis de ambiente:**
   \`\`\`bash
   export MEU_CLIENTE_FIREBASE_API_KEY="sua-api-key"
   export MEU_CLIENTE_FIREBASE_PROJECT_ID="seu-projeto"
   # ... outras vari√°veis
   \`\`\`

3. **Use o script de descriptografia para editar:**
   \`\`\`bash
   npm run decrypt-config decrypt meu-cliente
   \`\`\`

### 3. Valida√ß√£o

Sempre valide a configura√ß√£o antes de usar:

\`\`\`bash
npm run decrypt-config validate meu-cliente
\`\`\`

## üìÅ Estrutura do Arquivo Base

O arquivo base cont√©m:

- **ID**: base (ser√° alterado para o ID do cliente)
- **Nome**: Nova Federa√ß√£o (ser√° alterado para o nome da federa√ß√£o)
- **Admin**: admin / senha123 (ser√° alterado para credenciais seguras)
- **Firebase**: Configura√ß√µes de exemplo (ser√£o substitu√≠das pelas reais)
- **Branding**: Configura√ß√µes padr√£o (ser√£o personalizadas)

## üîí Seguran√ßa

- ‚úÖ Senhas s√£o hasheadas com bcrypt
- ‚úÖ Configura√ß√µes s√£o criptografadas
- ‚úÖ Nenhuma informa√ß√£o sens√≠vel em texto plano
- ‚úÖ Salt √∫nico por cliente

## üöÄ Deploy

Ap√≥s configurar um cliente:

1. **Configure as vari√°veis de ambiente no servidor**
2. **Fa√ßa deploy do backend**
3. **Configure o frontend para apontar para a API**
4. **Teste a conex√£o**

## üìû Suporte

Para d√∫vidas sobre configura√ß√£o, consulte a documenta√ß√£o completa ou entre em contato com o suporte t√©cnico.
`;

  fs.writeFileSync('configs/README.md', documentation);
  console.log('üìö Documenta√ß√£o criada: configs/README.md');
};

// Executar script
const main = async () => {
  await createBaseConfig();
  createDocumentation();
};

main().catch(console.error);
