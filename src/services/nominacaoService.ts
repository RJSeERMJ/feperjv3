import { competicaoService, inscricaoService } from './firebaseService';
import { Competicao, InscricaoCompeticao } from '../types';

export interface AtletasPorCategoria {
  categoriaPeso: string;
  atletas: InscricaoCompeticao[];
}

export interface NominacaoData {
  competicao: Competicao;
  inscricoes: InscricaoCompeticao[];
  atletasPorCategoria: AtletasPorCategoria[];
  totalInscritos: number;
  totalAprovados: number;
}

export const nominacaoService = {
  // Fun√ß√£o para organizar atletas por categoria de peso
  organizarAtletasPorCategoria(inscricoes: InscricaoCompeticao[]): AtletasPorCategoria[] {
    const categoriasMap = new Map<string, InscricaoCompeticao[]>();
    
    // Filtrar apenas atletas que N√ÉO est√£o cancelados
    const inscricoesAtivas = inscricoes.filter(inscricao => 
      inscricao.statusInscricao !== 'CANCELADO'
    );
    
    console.log(`üìä [NOMINA√á√ÉO] Total de inscri√ß√µes: ${inscricoes.length}, Ativas (n√£o canceladas): ${inscricoesAtivas.length}`);
    
    inscricoesAtivas.forEach(inscricao => {
      const categoriaPeso = inscricao.categoriaPeso?.nome || 'Sem Categoria';
      const sexo = inscricao.atleta?.sexo || 'N√£o informado';
      
      // Criar chave combinando sexo e categoria de peso
      const categoriaCompleta = `${sexo} - ${categoriaPeso}`;
      
      if (!categoriasMap.has(categoriaCompleta)) {
        categoriasMap.set(categoriaCompleta, []);
      }
      categoriasMap.get(categoriaCompleta)!.push(inscricao);
    });
    
    // Converter para array e ordenar por nome da categoria
    return Array.from(categoriasMap.entries())
      .map(([categoriaPeso, atletas]) => ({
        categoriaPeso,
        atletas: atletas.sort((a, b) => (a.atleta?.nome || '').localeCompare(b.atleta?.nome || ''))
      }))
      .sort((a, b) => a.categoriaPeso.localeCompare(b.categoriaPeso));
  },

  async getAllNominacoes(): Promise<NominacaoData[]> {
    try {
      console.log('üîÑ [NOMINA√á√ÉO] Iniciando busca de competi√ß√µes...');
      
      // Buscar apenas competi√ß√µes agendadas
      const todasCompeticoes = await competicaoService.getAll();
      const competicoes = todasCompeticoes.filter(competicao => competicao.status === 'AGENDADA');
      console.log('üìä [NOMINA√á√ÉO] Competi√ß√µes encontradas:', todasCompeticoes.length);
      console.log('üìä [NOMINA√á√ÉO] Competi√ß√µes agendadas:', competicoes.length);

      const nominacoes: NominacaoData[] = [];

      // Para cada competi√ß√£o, buscar as inscri√ß√µes
      for (const competicao of competicoes) {
        try {
          console.log(`üîç [NOMINA√á√ÉO] Buscando inscri√ß√µes para: ${competicao.nomeCompeticao}`);
          
          // Buscar inscri√ß√µes da competi√ß√£o
          const inscricoes = await inscricaoService.getByCompeticao(competicao.id!);
          console.log(`üìù [NOMINA√á√ÉO] Inscri√ß√µes encontradas para ${competicao.nomeCompeticao}:`, inscricoes.length);

          // Contar inscri√ß√µes aprovadas (INSCRITO = aprovado) - excluindo cancelados
          const totalAprovados = inscricoes.filter((inscricao: InscricaoCompeticao) => 
            inscricao.statusInscricao === 'INSCRITO'
          ).length;

          // Organizar atletas por categoria de peso
          const atletasPorCategoria = this.organizarAtletasPorCategoria(inscricoes);

          const nominacao: NominacaoData = {
            competicao,
            inscricoes,
            atletasPorCategoria,
            totalInscritos: inscricoes.length,
            totalAprovados
          };

          nominacoes.push(nominacao);
          console.log(`‚úÖ [NOMINA√á√ÉO] Processada: ${competicao.nomeCompeticao} - ${totalAprovados} aprovados de ${inscricoes.length} inscritos`);

        } catch (error) {
          console.error(`‚ùå [NOMINA√á√ÉO] Erro ao processar competi√ß√£o ${competicao.nomeCompeticao}:`, error);
          
          // Adicionar competi√ß√£o mesmo sem inscri√ß√µes
          const nominacao: NominacaoData = {
            competicao,
            inscricoes: [],
            atletasPorCategoria: [],
            totalInscritos: 0,
            totalAprovados: 0
          };
          nominacoes.push(nominacao);
        }
      }

      console.log('‚úÖ [NOMINA√á√ÉO] Total de nomina√ß√µes processadas:', nominacoes.length);
      return nominacoes;

    } catch (error) {
      console.error('‚ùå [NOMINA√á√ÉO] Erro ao buscar nomina√ß√µes:', error);
      throw error;
    }
  },

  async getNominacaoByCompeticaoId(competicaoId: string): Promise<NominacaoData | null> {
    try {
      console.log(`üîç [NOMINA√á√ÉO] Buscando nomina√ß√£o para competi√ß√£o: ${competicaoId}`);
      
      // Buscar competi√ß√£o
      const competicao = await competicaoService.getById(competicaoId);
      if (!competicao) {
        console.log(`‚ùå [NOMINA√á√ÉO] Competi√ß√£o n√£o encontrada: ${competicaoId}`);
        return null;
      }

      // Buscar inscri√ß√µes
      const inscricoes = await inscricaoService.getByCompeticao(competicaoId);
      console.log(`üìù [NOMINA√á√ÉO] Inscri√ß√µes encontradas:`, inscricoes.length);

      // Contar aprovados (INSCRITO = aprovado) - excluindo cancelados
      const totalAprovados = inscricoes.filter((inscricao: InscricaoCompeticao) => 
        inscricao.statusInscricao === 'INSCRITO'
      ).length;

      // Organizar atletas por categoria de peso
      const atletasPorCategoria = this.organizarAtletasPorCategoria(inscricoes);

      const nominacao: NominacaoData = {
        competicao,
        inscricoes,
        atletasPorCategoria,
        totalInscritos: inscricoes.length,
        totalAprovados
      };

      console.log(`‚úÖ [NOMINA√á√ÉO] Nomina√ß√£o encontrada: ${competicao.nomeCompeticao}`);
      return nominacao;

    } catch (error) {
      console.error(`‚ùå [NOMINA√á√ÉO] Erro ao buscar nomina√ß√£o para competi√ß√£o ${competicaoId}:`, error);
      throw error;
    }
  }
};
